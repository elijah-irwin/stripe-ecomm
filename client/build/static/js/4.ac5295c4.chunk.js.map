{"version":3,"sources":["components/collection-item/collection-item.component.jsx","pages/collection/collection.component.jsx","components/collection-preview/collection-preview.component.jsx","components/collection-overview/collection-overview.component.jsx","components/with-spinner/with-spinner.component.jsx","pages/shop/shop.component.jsx","redux/shop/shop.actions.js"],"names":["CollectionItem","item","name","price","imageUrl","dispatch","useDispatch","className","style","backgroundImage","inverted","onClick","addItemToCart","CollectionPage","categoryId","useParams","useSelector","state","shop","collections","title","items","toUpperCase","map","id","CollectionPreview","filter","index","CollectionOverview","Object","keys","col","withSpinner","Component","loading","rest","ColOverviewWithSpinner","ColPageWithSpinner","ShopPage","match","useRouteMatch","useEffect","a","type","collectionRef","firestore","collection","get","data","mappedData","convertCollectionsSnapshot","payload","message","exact","path"],"mappings":"oOAwCeA,EA5BQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEhBC,EAA0BD,EAA1BC,KAAMC,EAAoBF,EAApBE,MAAOC,EAAaH,EAAbG,SAGfC,EAAWC,cAEjB,OACE,sBAAKC,UAAU,kBAAf,UACE,qBACEA,UAAU,QACVC,MAAO,CAAEC,gBAAgB,OAAD,OAASL,EAAT,QAE1B,sBAAKG,UAAU,oBAAf,UACE,sBAAMA,UAAU,OAAhB,SAAwBL,IACxB,uBAAMK,UAAU,QAAhB,cAA0BJ,QAE5B,cAAC,IAAD,CACEI,UAAU,gBACVG,UAAQ,EACRC,QAAS,kBAAMN,EAASO,YAAcX,KAHxC,6BCASY,G,MAjBQ,WAAO,IACpBC,EAAeC,cAAfD,WADmB,EAEHE,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAA3CC,YAC6BL,GAA7BM,EAHmB,EAGnBA,MAAOC,EAHY,EAGZA,MAEf,OACE,sBAAKd,UAAU,kBAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBa,EAAME,gBAC7B,qBAAKf,UAAU,QAAf,SACGc,EAAME,KAAI,SAAAtB,GAAI,OACb,cAAC,EAAD,CAA8BA,KAAMA,GAAfA,EAAKuB,cCCrBC,G,OAfW,SAAC,GAAsB,IAApBL,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAClC,OACE,sBAAKd,UAAU,qBAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBa,EAAME,gBAC7B,qBAAKf,UAAU,UAAf,SACGc,EACEK,QAAO,SAACzB,EAAM0B,GAAP,OAAiBA,EAAQ,KAChCJ,KAAI,SAAAtB,GAAI,OACP,cAAC,EAAD,CAA8BA,KAAMA,GAAfA,EAAKuB,cCWvBI,G,OAhBY,WAAO,IACxBT,EAAgBH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAA3CC,YAER,OACE,qBAAKZ,UAAU,sBAAf,SACGsB,OAAOC,KAAKX,GAAaI,KAAI,SAAAQ,GAAG,OAC/B,cAAC,EAAD,CAEEX,MAAOD,EAAYY,GAAKX,MACxBC,MAAOF,EAAYY,GAAKV,OAFnBF,EAAYY,GAAKP,W,uBCVjBQ,EAJK,SAAAC,GAAS,OAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,QAAYC,EAAW,2BACzD,OAAOD,EAAU,cAAC,IAAD,IAAc,cAACD,EAAD,eAAeE,M,iCCY1CC,G,OAAyBJ,EAAYJ,IACrCS,EAAqBL,EAAYnB,GA6BxByB,UAvBE,WACf,IAAMC,EAAQC,cACRnC,EAAWC,cAETa,EAAgBH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAA3CC,YAMR,OAJAsB,qBAAU,WACRpC,ECzB0B,uCAAM,WAAMA,GAAN,mBAAAqC,EAAA,6DAElCrC,EAAS,CAAEsC,KAAM,4BAFiB,SAM1BC,EAAgBC,IAAUC,WAAW,eANX,SAObF,EAAcG,MAPD,OAO1BC,EAP0B,OAQ1BC,EAAaC,YAA2BF,GAC9C3C,EAAS,CAAEsC,KAAM,4BAA6BQ,QAASF,IATvB,kDAchC5C,EAAS,CAAEsC,KAAM,0BAA2BQ,QAAS,KAAIC,UAdzB,0DAAN,yDD0BzB,CAAC/C,IAGF,sBAAKE,UAAU,YAAf,UACE,cAAC,IAAD,CAAO8C,OAAK,EAACC,KAAMf,EAAMe,KAAzB,SACE,cAAClB,EAAD,CAAwBF,SAAUf,MAGpC,cAAC,IAAD,CAAOmC,KAAI,UAAKf,EAAMe,KAAX,gBAAX,SACE,cAACjB,EAAD,CAAoBH,SAAUf,W","file":"static/js/4.ac5295c4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// Redux\r\nimport { useDispatch } from 'react-redux'\r\nimport { addItemToCart } from '../../redux/cart/cart.actions'\r\n\r\n// Components\r\nimport CustomButton from '../custom-button/custom-button.component'\r\n\r\n// Styles\r\nimport './collection-item.styles.scss'\r\n\r\nconst CollectionItem = ({ item }) => {\r\n  // item props\r\n  const { name, price, imageUrl } = item\r\n\r\n  // Redux\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div className='collection-item'>\r\n      <div\r\n        className='image'\r\n        style={{ backgroundImage: `url(${imageUrl})` }}\r\n      ></div>\r\n      <div className='collection-footer'>\r\n        <span className='name'>{name}</span>\r\n        <span className='price'>${price}</span>\r\n      </div>\r\n      <CustomButton\r\n        className='custom-button'\r\n        inverted\r\n        onClick={() => dispatch(addItemToCart(item))}\r\n      >\r\n        Add To Cart\r\n      </CustomButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CollectionItem\r\n","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\n\r\n// components\r\nimport CollectionItem from '../../components/collection-item/collection-item.component'\r\n\r\n// redux\r\nimport { useSelector } from 'react-redux'\r\n\r\n// styles\r\nimport './collection.styles.scss'\r\n\r\nconst CollectionPage = () => {\r\n  const { categoryId } = useParams()\r\n  const { collections } = useSelector(state => state.shop)\r\n  const { title, items } = collections[categoryId]\r\n\r\n  return (\r\n    <div className='collection-page'>\r\n      <h2 className='title'>{title.toUpperCase()}</h2>\r\n      <div className='items'>\r\n        {items.map(item => (\r\n          <CollectionItem key={item.id} item={item} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CollectionPage\r\n","import React from 'react'\r\n\r\n// Styles\r\nimport './collection-preview.styles.scss'\r\n\r\n// Components\r\nimport CollectionItem from '../collection-item/collection-item.component'\r\n\r\nconst CollectionPreview = ({ title, items }) => {\r\n  return (\r\n    <div className='collection-preview'>\r\n      <h1 className='title'>{title.toUpperCase()}</h1>\r\n      <div className='preview'>\r\n        {items\r\n          .filter((item, index) => index < 4)\r\n          .map(item => (\r\n            <CollectionItem key={item.id} item={item} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CollectionPreview\r\n","import React from 'react'\r\n\r\n// redux\r\nimport { useSelector } from 'react-redux'\r\n\r\n// components\r\nimport CollectionPreview from '../collection-preview/collection-preview.component'\r\n\r\n// styles\r\nimport './collection-overview.styles.scss'\r\n\r\nconst CollectionOverview = () => {\r\n  const { collections } = useSelector(state => state.shop)\r\n\r\n  return (\r\n    <div className='collection-overview'>\r\n      {Object.keys(collections).map(col => (\r\n        <CollectionPreview\r\n          key={collections[col].id}\r\n          title={collections[col].title}\r\n          items={collections[col].items}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CollectionOverview\r\n","import React from 'react'\r\n\r\nimport Spinner from '../spinner/spinner.component'\r\n\r\nconst withSpinner = Component => ({ loading, ...rest }) => {\r\n  return loading ? <Spinner /> : <Component {...rest} />\r\n}\r\n\r\nexport default withSpinner\r\n","import React, { useEffect } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\n\r\n// pages\r\nimport CollectionPage from '../collection/collection.component'\r\n\r\n// components\r\nimport CollectionOverview from '../../components/collection-overview/collection-overview.component'\r\nimport withSpinner from '../../components/with-spinner/with-spinner.component'\r\n\r\n// redux\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getCollections } from '../../redux/shop/shop.actions'\r\n\r\n// styles\r\nimport './shop.styles.scss'\r\n\r\nconst ColOverviewWithSpinner = withSpinner(CollectionOverview)\r\nconst ColPageWithSpinner = withSpinner(CollectionPage)\r\n\r\n/**\r\n * Shop Page Component\r\n * @returns React Component\r\n */\r\nconst ShopPage = () => {\r\n  const match = useRouteMatch()\r\n  const dispatch = useDispatch()\r\n\r\n  const { collections } = useSelector(state => state.shop)\r\n\r\n  useEffect(() => {\r\n    dispatch(getCollections())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className='shop-page'>\r\n      <Route exact path={match.path}>\r\n        <ColOverviewWithSpinner loading={!collections} />\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/:categoryId`}>\r\n        <ColPageWithSpinner loading={!collections} />\r\n      </Route>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShopPage\r\n","// firebase\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshot,\r\n} from '../../firebase/firebase.utils'\r\n\r\nexport const getCollections = () => async dispatch => {\r\n  // start async fetch\r\n  dispatch({ type: 'FETCH_COLLECTIONS_START' })\r\n\r\n  // create firestore ref and query for data\r\n  try {\r\n    const collectionRef = firestore.collection('collections')\r\n    const data = await collectionRef.get()\r\n    const mappedData = convertCollectionsSnapshot(data)\r\n    dispatch({ type: 'FETCH_COLLECTIONS_SUCCESS', payload: mappedData })\r\n  }\r\n\r\n  // failed to query data\r\n  catch (err) {\r\n    dispatch({ type: 'FETCH_COLLECTIONS_ERROR', payload: err.message })\r\n  }\r\n}"],"sourceRoot":""}