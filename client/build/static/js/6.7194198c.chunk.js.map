{"version":3,"sources":["components/checkout-item/checkout-item.component.jsx","assets/crown.svg","components/stripe-button/stripe-button.component.jsx","pages/checkout/checkout.component.jsx"],"names":["CheckoutItem","item","name","imageUrl","price","quantity","dispatch","useDispatch","className","src","alt","onClick","clearItemFromCart","addItemToCart","removeItemFromCart","StripeCheckoutButton","priceForStripe","onToken","token","a","payload","amount","axios","post","alert","console","error","label","billingAddress","shippingAddress","image","Logo","description","panelLabel","stripeKey","CheckoutPage","cartItems","useSelector","state","cart","itemsTotalPrice","useMemo","reduce","total","map","id"],"mappings":"gMAiDeA,EArCM,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACdC,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,SAAUC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SACzBC,EAAWC,cAEjB,OACE,sBAAKC,UAAU,gBAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,qBAAKC,IAAKN,EAAUO,IAAI,WAG1B,sBAAMF,UAAU,OAAhB,SAAwBN,IAExB,uBAAMM,UAAU,WAAhB,UACE,qBACEA,UAAU,QACVG,QAAS,kBAAML,EAASM,YAAkBX,KAF5C,oBAMA,sBAAMO,UAAU,QAAhB,SAAyBH,IACzB,qBAAKG,UAAU,QAAQG,QAAS,kBAAML,EAASO,YAAcZ,KAA7D,uBAKF,uBAAMO,UAAU,QAAhB,cAA0BJ,KAE1B,qBACEI,UAAU,gBACVG,QAAS,kBAAML,EAASQ,YAAmBb,KAF7C,wB,6DCvCS,MAA0B,kCC2C1Bc,EApCc,SAAC,GAAe,IAAbX,EAAY,EAAZA,MAExBY,EAAyB,IAARZ,EAKjBa,EAAO,uCAAG,WAAMC,GAAN,eAAAC,EAAA,6DACRC,EAAU,CAAEC,OAAQL,EAAgBE,SAD5B,kBAGNI,IAAMC,KAAK,WAAYH,GAHjB,OAIZI,MAAM,oCAJM,gDAMZC,QAAQC,MAAR,MACAF,MACE,yEARU,yDAAH,sDAab,OACE,cAAC,IAAD,CACEG,MAAM,UACNzB,KAAK,qBACL0B,gBAAc,EACdC,iBAAe,EACfC,MAAOC,EACPC,YAAW,yBAAoB5B,GAC/BiB,OAAQL,EACRiB,WAAW,UACXf,MAAOD,EACPiB,UA3BF,iH,OC+CWC,UA9CM,WAAO,IAClBC,EAAcC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAzCH,UAIFI,EAAkBC,mBAAQ,WAC9B,OAAOL,EAAUM,QACf,SAACC,EAAO1C,GAAR,OAAiB0C,EAAQ1C,EAAKG,MAAQH,EAAKI,WAC3C,KAED,CAAC+B,IAEJ,OACE,sBAAK5B,UAAU,gBAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,6CAEF,qBAAKA,UAAU,eAAf,SACE,iDAEF,qBAAKA,UAAU,eAAf,SACE,8CAEF,qBAAKA,UAAU,eAAf,SACE,2CAEF,qBAAKA,UAAU,eAAf,SACE,+CAGH4B,GACCA,EAAUQ,KAAI,SAAA3C,GAAI,OAAI,cAAC,EAAD,CAA4BA,KAAMA,GAAfA,EAAK4C,OAChD,qBAAKrC,UAAU,QAAf,SACE,4CAAegC,OAEjB,sBAAKhC,UAAU,eAAf,qFAEE,uBAFF,yDAKA,cAAC,EAAD,CAAsBJ,MAAOoC","file":"static/js/6.7194198c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// Redux\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  removeItemFromCart,\r\n  clearItemFromCart,\r\n  addItemToCart,\r\n} from '../../redux/cart/cart.actions'\r\n\r\nimport './checkout-item.styles.scss'\r\n\r\nconst CheckoutItem = ({ item }) => {\r\n  const { name, imageUrl, price, quantity } = item\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <div className='checkout-item'>\r\n      <div className='image-container'>\r\n        <img src={imageUrl} alt='item' />\r\n      </div>\r\n\r\n      <span className='name'>{name}</span>\r\n\r\n      <span className='quantity'>\r\n        <div\r\n          className='arrow'\r\n          onClick={() => dispatch(clearItemFromCart(item))}\r\n        >\r\n          &#10094;\r\n        </div>\r\n        <span className='value'>{quantity}</span>\r\n        <div className='arrow' onClick={() => dispatch(addItemToCart(item))}>\r\n          &#10095;\r\n        </div>\r\n      </span>\r\n\r\n      <span className='price'>${price}</span>\r\n\r\n      <div\r\n        className='remove-button'\r\n        onClick={() => dispatch(removeItemFromCart(item))}\r\n      >\r\n        &#10005;\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CheckoutItem\r\n","export default __webpack_public_path__ + \"static/media/crown.3a4e2b15.svg\";","import React from 'react'\r\nimport axios from 'axios'\r\nimport StripeCheckout from 'react-stripe-checkout'\r\n\r\n// styles\r\nimport Logo from '../../assets/crown.svg'\r\n\r\nconst StripeCheckoutButton = ({ price }) => {\r\n  // stripe expects price to be in cents\r\n  const priceForStripe = price * 100\r\n  const stripePublishableKey =\r\n    'pk_test_51IX8ZZK8eTC0dC3Mqzti7ACdf2a81N6v8z6cK22niCZWUElS6qycrRIt4u7OSPqX0RjOYf0j0SKnby0VxHlOiEs700nnFp3N4x'\r\n\r\n  // Success callback function for Stripe, to then be handled on backend\r\n  const onToken = async token => {\r\n    const payload = { amount: priceForStripe, token }\r\n    try {\r\n      await axios.post('/payment', payload)\r\n      alert('Payment successful! üëç')\r\n    } catch (err) {\r\n      console.error(err)\r\n      alert(\r\n        'Payment error, make sure to use the specified test credit card below.'\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StripeCheckout\r\n      label='Pay Now'\r\n      name='Irwin Clothing Co.'\r\n      billingAddress\r\n      shippingAddress\r\n      image={Logo}\r\n      description={`Your total is $${price}`}\r\n      amount={priceForStripe}\r\n      panelLabel='Pay Now'\r\n      token={onToken}\r\n      stripeKey={stripePublishableKey}\r\n    />\r\n  )\r\n}\r\n\r\nexport default StripeCheckoutButton\r\n","import React, { useMemo } from 'react'\r\n\r\n// Components\r\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component'\r\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component'\r\n\r\n// Redux\r\nimport { useSelector } from 'react-redux'\r\n\r\n// Styles\r\nimport './checkout.styles.scss'\r\n\r\nconst CheckoutPage = () => {\r\n  const { cartItems } = useSelector(state => state.cart)\r\n\r\n  // only re-renders if cartItems changes\r\n  // see react hooks useMemo docs for more info\r\n  const itemsTotalPrice = useMemo(() => {\r\n    return cartItems.reduce(\r\n      (total, item) => total + item.price * item.quantity,\r\n      0\r\n    )\r\n  }, [cartItems])\r\n\r\n  return (\r\n    <div className='checkout-page'>\r\n      <div className='checkout-header'>\r\n        <div className='header-block'>\r\n          <span>Product</span>\r\n        </div>\r\n        <div className='header-block'>\r\n          <span>Description</span>\r\n        </div>\r\n        <div className='header-block'>\r\n          <span>Quantity</span>\r\n        </div>\r\n        <div className='header-block'>\r\n          <span>Price</span>\r\n        </div>\r\n        <div className='header-block'>\r\n          <span>Remove</span>\r\n        </div>\r\n      </div>\r\n      {cartItems &&\r\n        cartItems.map(item => <CheckoutItem key={item.id} item={item} />)}\r\n      <div className='total'>\r\n        <span>TOTAL: ${itemsTotalPrice}</span>\r\n      </div>\r\n      <div className='test-warning'>\r\n        Please use the following test credit card info to test the payment flow.\r\n        <br />\r\n        Card #: 4242 4242 4242 4242 - Exp: 01/25 - CVC: 123\r\n      </div>\r\n      <StripeCheckoutButton price={itemsTotalPrice} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CheckoutPage\r\n"],"sourceRoot":""}